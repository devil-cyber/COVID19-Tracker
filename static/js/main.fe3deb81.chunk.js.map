{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","isRed","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","classname","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","preetyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","href","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe3deb81.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoBox.css';  \nimport {Card,CardContent,Typography} from '@material-ui/core';\n\nfunction InfoBox({title,isRed,active,cases,total,...props}) {\n    return (\n         <Card \n         onClick={props.onClick} \n         className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`} \n         \n         >\n         <CardContent>\n         <Typography className='infobox_title'color='textSecondary'>{title}</Typography>\n\n         <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>{cases}</h2>\n\n         <Typography classname='infoBox_total'color='textSecondary'>{total} Total</Typography>\n\n         </CardContent>\n         </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react';\nimport { Circle, Popup } from 'react-leaflet';\n\nimport numeral from 'numeral';\nconst casesTypeColors = {\n    cases: {\n        hex: '#CC1034',\n        multiplier: 800\n    },\n    recovered: {\n        hex: '#7dd71d',\n        multiplier: 1200\n    },\n    deaths: {\n        hex: '#fb4443',\n        multiplier: 2000\n    },\n\n};\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => {\n        if (a.cases > b.cases) {\n            return -1;\n        }\n        else {\n            return 1\n        }\n    })\n    return sortedData;\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup>\n                <div className='info-container'>\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    />\n                    <div className='info-name'>{country.country}</div>\n                    <div className='info-conf'>Cases:{numeral(country.cases).format(\"0,0\")}</div>\n                    <div className='info-deaths'>Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);\n\nexport const preetyPrintStat = (stat) =>\n    stat ? `+${numeral(stat).format('0.0a')}` : \"+0\";\n\n","import React from 'react';\nimport \"./Map.css\";\nimport {Map as LeafletMap,TileLayer} from 'react-leaflet';\nimport { showDataOnMap } from './util';\n\nfunction Map({countries,casesType,center,zoom}) {\n    return (\n        <div className='map'>\n        <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy;<a href=\"https://osm.org/copyright\">OpenStreetMap</a>contributors'\n\n        />\n        {showDataOnMap(countries,casesType)}\n        </LeafletMap>\n            \n        </div>\n    );\n}\n\nexport default Map\n","import React from 'react';\nimport numeral from 'numeral';\n\nfunction Table({countries}) {\n    return (\n        <div className='table'>\n            {countries.map(({country,cases})=>(\n                <tr>\n                <td>{country}</td>\n                <td><strong>{numeral(cases).format()}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState,useEffect } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options={\n    legend:{\n        display:false,\n    },\n    elements:{\n        point:{\n            radius:0,\n        },\n    },\n    maintainAspectRatio:false,\n    tooltips:{\n        mode:'index',\n        intersect:false,\n        callbacks:{\n            label:function(tooltipItem,data){\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes:[\n            {\n                type:'time',\n                time:{\n                    format:'MM//DD/YY',\n                    tooltipFormat:'ll',\n                },\n            },\n        ],\n        yAxes:[\n            {\n                gridLines:{\n                    display:false,\n                },\n                ticks:{\n                    callback:function(value,index,values){\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    }\n}\nconst buildChartData = (data,casesType='cases') => {\n    const chartData=[];\n    let lastDataPoint;\n    for(let date in data.cases){\n        if(lastDataPoint){\n            const newDataPoint={\n                x:date,\n                y:data[casesType][date]-lastDataPoint\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint=data[casesType][date];\n    }\n    return chartData;\n}\n\nfunction LineGraph({casesType='cases',...props}) {\n    \n    const [data,setData]=useState({});\n    useEffect(() => {\n        const fetchData=async ()=>{\n     await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')  \n     .then((response)=>response.json()) \n     .then((data)=>{\n         let chartData=buildChartData(data,'cases');\n         setData(chartData);\n    });\n\n        }\n        fetchData()\n     \n    }, [casesType])\n\n\n\n    return (\n        <div className={props.className}>\n            {data?.length>0 && (\n                <Line\n                options={options}\n                 data={{\n                    datasets:[{\n                        backgroundColor:\"rgba(204,16,52,0.5)\",\n                        borderColor:'#CC1034',\n                        data:data\n                    },\n                ],\n                }}\n                />\n            )}</div>\n            )\n}\n\nexport default LineGraph\n","import React, { useState, useEffect } from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport {\n    MenuItem,\n    FormControl,\n    Select,\n    Card,\n    CardContent,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport \"./Table.css\";\nimport { sortData, preetyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n    const [countries, setCountries] = useState([]);\n    const [country, setCountry] = useState(\"worldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const [mapZoom, setMapZoom] = useState(2);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    useEffect(() => {\n        const getCountriesData = async() => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\")\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data.map((country) => ({\n                        name: country.country,\n                        value: country.countryInfo.iso2,\n                    }));\n                    const sortedData = sortData(data);\n                    setTableData(sortedData);\n                    setMapCountries(data);\n                    setCountries(countries);\n                });\n        };\n        getCountriesData();\n    }, []);\n    const onCountryChange = async(event) => {\n        const countryCode = event.target.value;\n        setCountry(countryCode);\n        const url =\n            countryCode === \"worldwide\" ?\n            \"https://disease.sh/v3/covid-19/all\" :\n            `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setCountry(countryCode);\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                console.log(data.countryInfo.lat);\n            });\n    };\n\n    return ( <\n        div className = \"App\" >\n        <\n        div className = \"app_left\" >\n        <\n        div className = \"app_header\" >\n        <\n        h2 >\n        By < a href = \"https://devil-cyber.github.io/Resume\" > Manikant < /a> <\n        /h2> <\n        h2 > COVID - 19 Tracker < /h2> <\n        FormControl className = \"app_dropdown\" >\n        <\n        Select variant = \"outlined\"\n        onChange = { onCountryChange }\n        value = { country } >\n        <\n        MenuItem value = \"worldwide\" > worldwide < /MenuItem> {\n            countries.map((country) => ( <\n                MenuItem value = { country.value } > { country.name } < /MenuItem>\n            ))\n        } <\n        /Select> <\n        /FormControl> <\n        /div> <\n        div className = \"app_stats\" >\n        <\n        InfoBox isRed active = { casesType === \"cases\" }\n        onClick = {\n            (e) => setCasesType(\"cases\") }\n        title = \"Coronavirus Cases\"\n        cases = { preetyPrintStat(countryInfo.todayCases) }\n        total = { preetyPrintStat(countryInfo.cases) }\n        />\n\n        <\n        InfoBox active = { casesType === \"recovered\" }\n        onClick = {\n            (e) => setCasesType(\"recovered\") }\n        title = \"Recovered\"\n        cases = { preetyPrintStat(countryInfo.todayRecovered) }\n        total = { preetyPrintStat(countryInfo.recovered) }\n        />\n\n        <\n        InfoBox isRed active = { casesType === \"deaths\" }\n        onClick = {\n            (e) => setCasesType(\"deaths\") }\n        title = \"Deaths\"\n        cases = { preetyPrintStat(countryInfo.todayDeaths) }\n        total = { preetyPrintStat(countryInfo.deaths) }\n        /> <\n        /div>\n\n        <\n        Map casesType = { casesType }\n        countries = { mapCountries }\n        center = { mapCenter }\n        zoom = { mapZoom }\n        /> <\n        /div>\n\n        <\n        Card className = \"app_right\" >\n        <\n        CardContent >\n        <\n        h3 > Live Cases By Country < /h3> <\n        Table countries = { tableData }\n        /> <\n        h3 className = \"app_graphTitle\" > WorldWide new { casesType } < /h3> <\n        LineGraph casesType = { casesType }\n        className = \"app_graph\" / >\n        <\n        /CardContent> <\n        /Card> <\n        /div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}